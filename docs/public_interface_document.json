{
  "package_name": "com.yeah_well.todo_apps",
  "project_description": "A comprehensive Flutter todo application featuring multi-feature authentication and task management. The app supports user registration, login, profile management, and todo list operations with a clean, modular architecture. Key features include user authentication, profile editing, todo creation/management, and persistent local storage. The application leverages Firebase for potential backend services and follows a robust Stacked architecture with dependency injection and reactive state management.",
  "architecture_overview": "The project follows a modular, multi-layered architecture using the Stacked framework. Core architectural components include feature-specific repositories, services, and view models that encapsulate business logic. The app is structured with clear separation of concerns: presentation layer (views), business logic layer (view models), data layer (repositories and services), and models. Dependency injection is managed through app.locator.dart, enabling loose coupling between components.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/l10n/localizations_extension.dart",
      "description": "This Dart file provides an extension on the BuildContext class to make it easier to access the current AppLocalizations instance, which is responsible for managing the application's localization and internationalization.",
      "class_diagram": "",
      "methods": [
        {
          "name": "localizations",
          "description": "Retrieves the current AppLocalizations instance for the given BuildContext.",
          "parameters": null,
          "return_type": "AppLocalizations"
        }
      ],
      "dependencies": [
        "flutter/widgets.dart",
        "flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This file is responsible for managing the bottom sheet UI in the Flutter application. It sets up the custom bottom sheet builders for different types of bottom sheets, allowing the application to display various types of bottom sheets as needed.",
      "class_diagram": "@startuml\n\nclass BottomSheetService {\n  + setCustomSheetBuilders(builders: Map<BottomSheetType, SheetBuilder>)\n}\n\nclass BottomSheetType {\n  + notice\n}\n\ninterface SheetBuilder {\n  + (context: BuildContext, request: SheetRequest, completer: SheetCompleter)\n}\n\nclass NoticeSheet {\n  + (request: SheetRequest, completer: SheetCompleter)\n}\n\nBottomSheetService --> BottomSheetType\nBottomSheetService --> SheetBuilder\nNoticeSheet .> SheetBuilder\n\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "Sets up the custom bottom sheet builders for different types of bottom sheets, allowing the application to display various types of bottom sheets as needed.",
          "parameters": [
            "None"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/l10n/supported_locales.dart",
      "description": "This Dart file is responsible for managing the supported locales and localization delegates for the Flutter application. It provides a centralized and reusable way to handle the internationalization (i18n) and localization (l10n) of the app.",
      "class_diagram": "",
      "methods": [
        {
          "name": "localizationsDelegates",
          "description": "Returns a list of localization delegates that provide the translation and formatting logic for the application's strings.",
          "parameters": null,
          "return_type": "List<LocalizationsDelegate<dynamic>>"
        },
        {
          "name": "supportedLocales",
          "description": "Returns a list of locales that the application supports for translation and formatting.",
          "parameters": null,
          "return_type": "List<Locale>"
        }
      ],
      "dependencies": [
        "flutter/widgets.dart",
        "flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This file is responsible for managing the navigation and routing within the Flutter application. It defines the available routes, the corresponding views, and provides utility methods to navigate between these views.",
      "class_diagram": "@startuml\nclass Routes {\n  +static const homeView: String\n  +static const startupView: String\n  +static const all: Set<String>\n}\n\nclass StackedRouter extends RouterBase {\n  +List<RouteDef> get routes()\n  +Map<Type, StackedRouteFactory> get pagesMap()\n}\n\nclass NavigatorStateExtension on NavigationService {\n  +Future<dynamic> navigateToHomeView(...)\n  +Future<dynamic> navigateToStartupView(...)\n  +Future<dynamic> replaceWithHomeView(...)\n  +Future<dynamic> replaceWithStartupView(...)\n}\n@enduml",
      "methods": [
        {
          "name": "navigateToHomeView",
          "description": "Navigates to the HomeView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToStartupView",
          "description": "Navigates to the StartupView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithHomeView",
          "description": "Replaces the current route with the HomeView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithStartupView",
          "description": "Replaces the current route with the StartupView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/views/home/home_view.dart",
        "package:my_app/ui/views/startup/startup_view.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main/bootstrap.dart",
      "description": "This file is responsible for bootstrapping the Flutter application, setting up the necessary dependencies, and running the main app widget. It serves as the entry point for the application, ensuring a consistent initialization process across different app flavors.",
      "class_diagram": "",
      "methods": [
        {
          "name": "bootstrap",
          "description": "This is the main entry point function that initializes the application. It sets up the app's flavor, ensures the WidgetsFlutterBinding is initialized, and configures the app's orientation, locator, dialog UI, and bottom sheet UI. Finally, it runs the main app widget provided by the caller.",
          "parameters": [
            "builder",
            "flavor"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/utils/flavors/flavors.dart"
      ]
    },
    {
      "name": "lib/main/main_production.dart",
      "description": "This file is responsible for bootstrapping the production version of the application. It sets up the initial state and configuration for the app, ensuring it runs in the production environment.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main",
          "description": "The entry point of the application. It calls the `bootstrap` function to initialize the app and render the `AppView`.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/main/bootstrap.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/main/main_development.dart",
      "description": "This Dart file is responsible for bootstrapping the development version of the Flutter application. It sets up the application's entry point and configures the application flavor to be 'development'.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main",
          "description": "The main entry point of the application that initializes the development build of the app.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/main/bootstrap.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/models/enums/flavor.dart",
      "description": "This file defines an enum called `Flavor` with two values: `production` and `development`. It represents the different flavors or environments that the application can run in.",
      "class_diagram": "@startuml\nenum Flavor {\n  production\n  development\n}\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/services/analytic_service.dart",
      "description": "The AnalyticService class is a wrapper for analytics functionality in the application. It encapsulates the implementation of analytics tracking and provides a centralized interface for managing analytics-related operations.",
      "class_diagram": "@startuml\nclass AnalyticService {\n  + init(): Future<void>\n}\n@enduml",
      "methods": [
        {
          "name": "init",
          "description": "Initializes the AnalyticService, preparing it for use.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:stacked/stacked_annotations.dart"
      ]
    },
    {
      "name": "lib/observer/screen_observer.dart",
      "description": "The ScreenObserver class is responsible for tracking the screen views of the application using the AnalyticService. It is a NavigatorObserver that listens for navigation events and logs screen transitions to the analytics service.",
      "class_diagram": "@startuml\nclass ScreenObserver extends NavigatorObserver {\n  + ScreenObserver()\n  + void didPush(Route<dynamic> route, Route<dynamic>? previousRoute)\n  + void didReplace({Route<dynamic>? newRoute, Route<dynamic>? oldRoute})\n  + void didPop(Route<dynamic> route, Route<dynamic>? previousRoute)\n  - void _trackScreenView(Route<dynamic> route)\n}\n\nAnalyticService --* ScreenObserver\n@enduml",
      "methods": [
        {
          "name": "didPush",
          "description": "Tracks the screen view when a new route is pushed onto the navigation stack.",
          "parameters": [
            "Route<dynamic> route",
            "Route<dynamic>? previousRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "didReplace",
          "description": "Tracks the screen view when a route is replaced in the navigation stack.",
          "parameters": [
            "Route<dynamic>? newRoute",
            "Route<dynamic>? oldRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "didPop",
          "description": "Tracks the screen view when a route is popped from the navigation stack.",
          "parameters": [
            "Route<dynamic> route",
            "Route<dynamic>? previousRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "_trackScreenView",
          "description": "Logs the screen view to the AnalyticService based on the current route.",
          "parameters": [
            "Route<dynamic> route"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "my_app/services/analytic_service.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This Dart file defines a set of reusable color constants that represent the primary color palette of the application. These colors are used throughout the UI to ensure a consistent and branded visual experience.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "The NoticeSheetModel class is responsible for managing the state and behavior of the notice bottom sheet UI component in the application. It provides the core functionality and business logic for displaying and interacting with the notice sheet.",
      "class_diagram": "@startuml\nclass NoticeSheetModel {\n  +showNotice()\n  +dismissNotice()\n  +isLoading : bool\n  +noticeMessage : String\n}\n@enduml",
      "methods": [
        {
          "name": "showNotice",
          "description": "Displays the notice bottom sheet with the specified message.",
          "parameters": [
            "message"
          ],
          "return_type": "void"
        },
        {
          "name": "dismissNotice",
          "description": "Dismisses the currently displayed notice bottom sheet.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This Dart file provides a collection of common UI helper functions and constants that are used throughout the Flutter application's user interface. It serves as a centralized location for managing and accessing various UI-related utilities, ensuring consistency and reusability across the codebase.",
      "class_diagram": "@startuml\nclass UIHelpers {\n  + const horizontalSpaceTiny: Widget\n  + const horizontalSpaceSmall: Widget\n  + const horizontalSpaceMedium: Widget\n  + const horizontalSpaceLarge: Widget\n  + const verticalSpaceTiny: Widget\n  + const verticalSpaceSmall: Widget\n  + const verticalSpaceMedium: Widget\n  + const verticalSpaceLarge: Widget\n  + const verticalSpaceMassive: Widget\n  + const spacedDivider: Widget\n  + verticalSpace(height: double): Widget\n  + screenWidth(context: BuildContext): double\n  + screenHeight(context: BuildContext): double\n  + screenHeightFraction(context: BuildContext, dividedBy: int, offsetBy: double, max: double): double\n  + screenWidthFraction(context: BuildContext, dividedBy: int, offsetBy: double, max: double): double\n  + halfScreenWidth(context: BuildContext): double\n  + thirdScreenWidth(context: BuildContext): double\n  + quarterScreenWidth(context: BuildContext): double\n  + getResponsiveHorizontalSpaceMedium(context: BuildContext): double\n  + getResponsiveSmallFontSize(context: BuildContext): double\n  + getResponsiveMediumFontSize(context: BuildContext): double\n  + getResponsiveLargeFontSize(context: BuildContext): double\n  + getResponsiveExtraLargeFontSize(context: BuildContext): double\n  + getResponsiveMassiveFontSize(context: BuildContext): double\n  + getResponsiveFontSize(context: BuildContext, fontSize: double, max: double): double\n}\n@enduml",
      "methods": [
        {
          "name": "horizontalSpaceTiny",
          "description": "A constant Widget that provides a tiny horizontal space.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "verticalSpace",
          "description": "A function that creates a Widget with a specified vertical space.",
          "parameters": [
            "height"
          ],
          "return_type": "Widget"
        },
        {
          "name": "screenWidth",
          "description": "A function that returns the width of the screen.",
          "parameters": [
            "context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "A function that calculates a responsive font size based on the screen width.",
          "parameters": [
            "context",
            "fontSize",
            "max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "The NoticeSheet class is responsible for displaying a bottom sheet with a notice or alert message to the user. It is part of the UI layer of the application and is used to present important information or updates to the user in a modal dialog.",
      "class_diagram": "@startuml\n  class NoticeSheet {\n    + NoticeSheet({required this.completer, required this.request})\n    + Widget builder(BuildContext context, NoticeSheetModel viewModel, Widget? child)\n    + NoticeSheetModel viewModelBuilder(BuildContext context)\n  }\n\n  class NoticeSheetModel {\n    # NoticeSheetModel()\n  }\n\n  NoticeSheet --> NoticeSheetModel\n  @enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI of the NoticeSheet, which includes the title, description, and any other relevant content.",
          "parameters": [
            "BuildContext context",
            "NoticeSheetModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the NoticeSheetModel, which is used to manage the state and logic of the NoticeSheet.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This Dart file contains the `InfoAlertDialogModel` class, which is responsible for managing the state and behavior of an information alert dialog in a Flutter application.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel {\n}\nInfoAlertDialogModel -[hidden]- BaseViewModel\n@enduml",
      "methods": [
        {
          "name": "InfoAlertDialogModel",
          "description": "The constructor for the `InfoAlertDialogModel` class.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/app/app_viewmodel.dart",
      "description": "The AppViewModel class is responsible for managing the state and behavior of the main application view in a Flutter application. It serves as the ViewModel component in the Model-View-ViewModel (MVVM) architecture, which separates the presentation logic from the business logic.",
      "class_diagram": "@startuml\nclass AppViewModel extends BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_view.dart",
      "description": "The `HomeView` class is responsible for rendering the main UI of the application's home screen. It provides a simple interface for displaying a counter value and allowing the user to interact with the screen by incrementing the counter, showing a dialog, or displaying a bottom sheet.",
      "class_diagram": "@startuml\nclass HomeView {\n  +builder(BuildContext, HomeViewModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): HomeViewModel\n}\n\nclass HomeViewModel {\n  +incrementCounter(): void\n  +showDialog(): void\n  +showBottomSheet(): void\n  +counterLabel: String\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI of the home screen, including the counter display, increment button, dialog button, and bottom sheet button.",
          "parameters": [
            "BuildContext",
            "HomeViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the `HomeViewModel` to be used by the `HomeView`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "HomeViewModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "gap/gap.dart",
        "my_app/ui/views/home/home_viewmodel.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_viewmodel.dart",
      "description": "The HomeViewModel class is responsible for managing the state and behavior of the home screen in the application. It provides the core functionality for handling the counter value and displaying it, as well as providing methods to show a custom dialog and a bottom sheet.",
      "class_diagram": "@startuml\nclass HomeViewModel {\n  - _dialogService: DialogService\n  - _bottomSheetService: BottomSheetService\n  - _counter: int\n  + counterLabel: String\n  + incrementCounter(): void\n  + showDialog(): void\n  + showBottomSheet(): void\n}\n@enduml",
      "methods": [
        {
          "name": "counterLabel",
          "description": "Returns a string representation of the current counter value.",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "incrementCounter",
          "description": "Increments the counter value and rebuilds the UI.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Displays a custom dialog with a title and description.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Displays a custom bottom sheet with a title and description.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.bottomsheets.dart",
        "my_app/app/app.dialogs.dart",
        "my_app/app/app.locator.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_view.dart",
      "description": "The `StartupView` class in this file is responsible for the initial startup screen of the application. It is the main entry point for the user when they launch the app, displaying the app's logo and a loading indicator while the app's startup logic is being executed.",
      "class_diagram": "@startuml\nclass StartupView {\n  + builder(BuildContext, StartupViewModel, Widget?): Widget\n  + viewModelBuilder(BuildContext): StartupViewModel\n  + onViewModelReady(StartupViewModel): void\n}\n\nclass StartupViewModel {\n  + runStartupLogic(): void\n}\n\nStartupView --> StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the startup screen, displaying the app's logo and a loading indicator.",
          "parameters": [
            "BuildContext",
            "StartupViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the `StartupViewModel` to be used by the `StartupView`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "StartupViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Called when the `StartupViewModel` is ready, triggering the execution of the app's startup logic.",
          "parameters": [
            "StartupViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "flutter/scheduler.dart",
        "gap/gap.dart",
        "my_app/ui/views/startup/startup_viewmodel.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_viewmodel.dart",
      "description": "The StartupViewModel class is responsible for handling the initial startup logic of the application. It is responsible for delaying the application launch by a few seconds and then navigating to the home view, which is the main entry point of the application.",
      "class_diagram": "@startuml\n  class StartupViewModel {\n    -_navigationService : NavigationService\n    +runStartupLogic() : Future\n  }\n  @enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "This method is responsible for the core startup logic of the application. It delays the application launch by 3 seconds and then navigates to the home view using the NavigationService.",
          "parameters": [
            "None"
          ],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/app/app.router.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/config/production/firebase_options_production.dart",
      "description": "This file defines the Firebase configuration options for the production environment of the application. It is responsible for providing the necessary Firebase-related settings and credentials to integrate the application with the Firebase services in the production environment.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:firebase_core/firebase_core.dart",
        "lib/config/firebase_options.dart"
      ]
    },
    {
      "name": "lib/utils/const/const.dart",
      "description": "This file contains a set of constant values and data structures that are used throughout the application. It serves as a centralized repository for global configuration and settings, providing a consistent and easily accessible way to manage application-wide constants.",
      "class_diagram": "@startuml\n' Enumerations and Constants\npublicConstant totalOnboarding : int\npublicConstant onBoardingHeaderTag : String\npublicConstant pathCompliantStatement : String\npublicConstant pathTermsOfServices : String\npublicConstant defaultContactEmail : String\npublicConstant defaultContactPhone : String\npublicConstant introYoutubeId : String\npublicConstant defaultLanguagesList : List<Map<String, String>>\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/utils/contact/contact_util.dart",
      "description": "The `ContactUtil` class provides utility functions for launching WhatsApp and email communication from a Flutter application. It handles the platform-specific logic to open the appropriate communication channels for the user's device.",
      "class_diagram": "@startuml\nclass ContactUtil {\n  +static Future<void> launchWhatsApp(String phone, {String text = ''})\n  +static Future<void> launchEmail(String email)\n}\n@enduml",
      "methods": [
        {
          "name": "launchWhatsApp",
          "description": "Launches the WhatsApp application or the WhatsApp web interface with a pre-filled message and recipient phone number.",
          "parameters": [
            "phone",
            "text"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "launchEmail",
          "description": "Launches the default email application with the specified email address.",
          "parameters": [
            "email"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "dart:io",
        "package:url_launcher/url_launcher.dart"
      ]
    },
    {
      "name": "lib/utils/date/date_util.dart",
      "description": "The `DateUtil` class provides a set of utility functions for handling date and time data in the application, particularly when interacting with Firestore.",
      "class_diagram": "@startuml\nclass DateUtil {\n  + static DateTime? fromJson(dynamic value)\n}\n@enduml",
      "methods": [
        {
          "name": "fromJson",
          "description": "Extracts a `DateTime` object from a dynamic input value, which can be a `Timestamp` from Firestore, a `String` representation of a date and time, or a `DateTime` object directly.",
          "parameters": [
            "dynamic value"
          ],
          "return_type": "DateTime?"
        }
      ],
      "dependencies": [
        "cloud_firestore/cloud_firestore.dart"
      ]
    },
    {
      "name": "lib/utils/exceptions/api_exception.dart",
      "description": "This file defines a custom exception class `APIException` that is used to handle and propagate exceptions that occur during API service interactions. It provides a standardized way to handle and communicate errors that arise in the application's API layer.",
      "class_diagram": "@startuml\n  class APIException implements Exception {\n    -dynamic message\n    +toString(): String\n  }\n  @enduml",
      "methods": [
        {
          "name": "APIException",
          "description": "Constructor for the `APIException` class. Allows for the creation of a new `APIException` instance with an optional error message.",
          "parameters": [
            "message"
          ],
          "return_type": null
        },
        {
          "name": "toString",
          "description": "Overrides the default `toString()` method to provide a string representation of the `APIException` instance, including the runtime type and the error message.",
          "parameters": null,
          "return_type": "String"
        }
      ],
      "dependencies": [
        "dart:core"
      ]
    },
    {
      "name": "lib/utils/extensions/color_extension.dart",
      "description": "This Dart file provides a custom extension on the Flutter `Color` class, adding utility methods for converting hexadecimal color strings to `Color` objects and integer values. This extension simplifies the process of working with color-related functionality in the application, improving developer productivity and maintainability.",
      "class_diagram": "@startuml\nclass Color {\n  +static Color fromHex(String hexColorString)\n  +static int intFromHex(String hexColorString)\n}\n@enduml",
      "methods": [
        {
          "name": "fromHex",
          "description": "Converts a hexadecimal color string (e.g., '#FF0000' for red) to a `Color` object.",
          "parameters": [
            "hexColorString"
          ],
          "return_type": "Color"
        },
        {
          "name": "intFromHex",
          "description": "Converts a hexadecimal color string (e.g., '#FF0000' for red) to an integer value representing the color.",
          "parameters": [
            "hexColorString"
          ],
          "return_type": "int"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/utils/flavors/flavors.dart",
      "description": "This file defines a singleton class 'Flavors' that is responsible for managing the current application flavor, which is typically used to differentiate between development, staging, and production environments. The main purpose of this class is to provide a centralized way to access and check the current application flavor, enabling the application to behave differently based on the specific environment it is running in.",
      "class_diagram": "@startuml\nclass Flavors {\n  - static Flavor? flavor\n  + static bool get isDev()\n  + static bool get isProd()\n}\n@enduml",
      "methods": [
        {
          "name": "Flavors",
          "description": "Private constructor for the Flavors class, ensuring a singleton instance.",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "Flavors.factory",
          "description": "Factory constructor for the Flavors class, returning the singleton instance.",
          "parameters": null,
          "return_type": "Flavors"
        },
        {
          "name": "isDev",
          "description": "Getter that returns true if the current application flavor is Flavor.development.",
          "parameters": null,
          "return_type": "bool"
        },
        {
          "name": "isProd",
          "description": "Getter that returns true if the current application flavor is Flavor.production.",
          "parameters": null,
          "return_type": "bool"
        }
      ],
      "dependencies": [
        "my_app/models/enums/flavor.dart"
      ]
    },
    {
      "name": "lib/utils/json/json_util.dart",
      "description": "The JsonUtil class is responsible for providing utility functions to handle JSON data in the application. It solves the problem of safely and consistently parsing and formatting JSON data, which is a common task in modern web and mobile applications.",
      "class_diagram": "@startuml\nclass JsonUtil {\n  +static Map<String, dynamic> formatMap(Map<dynamic, dynamic>)\n  +static T? fromJsonOrNull<T>(dynamic, T Function(Map<String, dynamic>))\n  +static List<T> formatListMap<T>(List<dynamic>, T Function(Map<String, dynamic>))\n}\n@enduml",
      "methods": [
        {
          "name": "formatMap",
          "description": "Converts a Map<dynamic, dynamic> to a Map<String, dynamic> by removing any null keys.",
          "parameters": [
            "Map<dynamic, dynamic>"
          ],
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "fromJsonOrNull",
          "description": "Safely converts a dynamic JSON value to an instance of type T, or returns null if the input is invalid.",
          "parameters": [
            "dynamic",
            "T Function(Map<String, dynamic>)"
          ],
          "return_type": "T?"
        },
        {
          "name": "formatListMap",
          "description": "Converts a List<dynamic> of JSON objects to a List<T> by applying the given fromJson function to each object.",
          "parameters": [
            "List<dynamic>",
            "T Function(Map<String, dynamic>)"
          ],
          "return_type": "List<T>"
        }
      ],
      "dependencies": [
        "dart:core",
        "dart:collection"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "This file defines an InfoAlertDialog class, which is responsible for displaying an informative alert dialog with a title, description, and a confirmation button. The primary purpose of this class is to provide a reusable and customizable way to present important information to the user within the application.",
      "class_diagram": "@startuml\nclass InfoAlertDialog {\n  -DialogRequest request\n  -Function(DialogResponse) completer\n  +builder(BuildContext, InfoAlertDialogModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): InfoAlertDialogModel\n}\n\nclass InfoAlertDialogModel {\n}\n\nInfoAlertDialog *-- InfoAlertDialogModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "The main build method that constructs the UI for the InfoAlertDialog. It takes the DialogRequest, DialogResponse completer, and the view model as input and returns the final widget.",
          "parameters": [
            "BuildContext",
            "InfoAlertDialogModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "A method that creates and returns an instance of the InfoAlertDialogModel, which is used to manage the state and logic of the dialog.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog_model.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/config/development/firebase_options_development.dart",
      "description": "This Dart file is responsible for providing the configuration options for the Firebase service in the development environment of the application. It defines the necessary credentials and settings to initialize and interact with the Firebase platform during the development phase.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "firebase_core",
        "flutter_dotenv"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This file is responsible for setting up and managing the service locator in a Flutter application built using the Stacked architecture pattern. The service locator is a crucial component that allows different parts of the application to access and interact with various services and dependencies, promoting a modular and decoupled design.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method is responsible for registering the necessary services and dependencies with the service locator. It allows the application to access and use these services throughout the codebase.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/l10n/l10n.dart",
      "description": "Centralized localization and internationalization (i18n) configuration export file that provides standardized access to app localization resources and supported language configurations",
      "class_diagram": "@startuml\npackage Localization {\n    [app_localizations.dart]\n    [localizations_extension.dart]\n    [supported_locales.dart]\n}\n@enduml",
      "methods": [
        {
          "name": "exportLocalizations",
          "description": "Exports core localization components for unified language support across the application",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:flutter_gen/gen_l10n/app_localizations.dart",
        "localizations_extension.dart",
        "supported_locales.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This file is responsible for setting up and managing the dialog system used throughout the application. It defines the available dialog types, registers the custom dialog builders, and provides a centralized way to interact with the dialog service.",
      "class_diagram": "@startuml\n'Hide the stereotype since it is the default for class\n'hide circle\n'hide methods\n'skinparam classAttributeIconSize 0\n\nclass DialogType {\n  infoAlert\n}\n\nclass DialogBuilder {\n  (BuildContext, DialogRequest, DialogCompleter) => Widget\n}\n\nclass DialogService {\n  + registerCustomDialogBuilders(Map<DialogType, DialogBuilder>)\n}\n\n'Relationships\nDialogType *-- DialogBuilder : builds\nDialogService o-- DialogBuilder : uses\n\n@enduml",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "Configures the dialog service by registering the custom dialog builders for each dialog type.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/app/app_view.dart",
      "description": "The `AppView` class is the main entry point for the Flutter application. It is responsible for setting up the overall application structure, including the navigation, localization, and event handling. This class serves as the foundation for the entire application, providing the core functionality and user experience.",
      "class_diagram": "@startuml\nclass AppView {\n  +build(context, viewModel): Widget\n}\n\nclass _App {\n  +build(context, viewModel): Widget\n}\n\nAppView *-- _App\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the main application widget tree, including the MaterialApp, navigation, localization, and event handling.",
          "parameters": [
            "context",
            "viewModel"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/app/app.router.dart",
        "package:my_app/l10n/supported_locales.dart",
        "package:my_app/observer/screen_observer.dart",
        "package:my_app/ui/views/app/app_viewmodel.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/auth/login_view.dart",
      "description": "A user interface for authentication that allows users to log into the TodoApps application by entering their email and password, with error handling and navigation to registration",
      "class_diagram": "@startuml\nclass LoginView {\n  +builder(context, viewModel, child): Widget\n  +viewModelBuilder(context): LoginViewModel\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Constructs the login screen UI, handling error display, input fields, login button, and registration navigation",
          "parameters": [
            "BuildContext",
            "LoginViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates the LoginViewModel instance for managing login state and logic",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "LoginViewModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "login_viewmodel.dart",
        "ui/common/ui_helpers.dart"
      ]
    },
    {
      "name": "lib/features/auth/auth_repository.dart",
      "description": "Authentication repository responsible for managing user authentication workflows, providing a clean abstraction layer over the underlying authentication service",
      "class_diagram": "@startuml\nclass AuthRepository {\n  -AuthService _authService\n  +User? currentUser\n  +bool isAuthenticated\n  +login(email: String, password: String)\n  +register(username: String, email: String, password: String)\n  +logout()\n  +updateProfile(username: String, avatarUrl: String?)\n}\n@enduml",
      "methods": [
        {
          "name": "login",
          "description": "Authenticates a user with email and password credentials",
          "parameters": [
            "email",
            "password"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "register",
          "description": "Creates a new user account with username, email, and password",
          "parameters": [
            "username",
            "email",
            "password"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "logout",
          "description": "Terminates the current user's authentication session",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "updateProfile",
          "description": "Updates user profile information like username and avatar",
          "parameters": [
            "username",
            "avatarUrl"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "todo_apps/models/user.dart",
        "todo_apps/services/auth_service.dart"
      ]
    },
    {
      "name": "lib/features/profile/profile_viewmodel.dart",
      "description": "Profile management ViewModel responsible for handling user profile interactions, updates, and authentication state in a Flutter/Stacked architecture application",
      "class_diagram": "@startuml\nclass ProfileViewModel {\n  - _profileRepository: ProfileRepository\n  - _authRepository: AuthRepository\n  - _navigationService: NavigationService\n  + user: User\n  + updateProfile()\n  + logout()\n  + init()\n}\n@enduml",
      "methods": [
        {
          "name": "setUsername",
          "description": "Updates the username in the profile and triggers UI refresh",
          "parameters": [
            "username"
          ],
          "return_type": null
        },
        {
          "name": "updateProfile",
          "description": "Submits updated profile information to the backend",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "logout",
          "description": "Handles user logout process and navigation back to login screen",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "init",
          "description": "Initializes profile view model with current user data",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "stacked",
        "stacked_services",
        "auth_repository.dart",
        "profile_repository.dart",
        "user.dart"
      ]
    },
    {
      "name": "lib/features/todo/todo_repository.dart",
      "description": "A repository layer for managing todo items that abstracts data operations, providing a clean interface between the data service and application business logic",
      "class_diagram": "@startuml\nclass TodoRepository {\n  -TodoService _todoService\n  +getTodos()\n  +addTodo()\n  +updateTodo()\n  +deleteTodo()\n  +toggleTodoComplete()\n}\n@enduml",
      "methods": [
        {
          "name": "getTodos",
          "description": "Retrieves a list of all todo items from the underlying data service",
          "parameters": null,
          "return_type": "Future<List<Map<String, dynamic>>>"
        },
        {
          "name": "addTodo",
          "description": "Creates a new todo item with a title and description",
          "parameters": [
            "title",
            "description"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "updateTodo",
          "description": "Modifies an existing todo item's properties",
          "parameters": [
            "id",
            "title",
            "description",
            "completed"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deleteTodo",
          "description": "Removes a specific todo item from the system",
          "parameters": [
            "id"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "toggleTodoComplete",
          "description": "Switches the completion status of a specific todo item",
          "parameters": [
            "id"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "todo_service.dart"
      ]
    },
    {
      "name": "lib/features/todo/todo_view.dart",
      "description": "A Flutter view component for managing a Todo list application, providing a user interface for displaying, adding, toggling, and deleting todo items with error handling and loading states",
      "class_diagram": "@startuml\nclass TodoView {\n  +builder(BuildContext, TodoViewModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): TodoViewModel\n  +onViewModelReady(TodoViewModel): void\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Constructs the main UI for the Todo list screen, including app bar, todo list, error handling, and floating action button for adding new todos",
          "parameters": [
            "BuildContext",
            "TodoViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates the TodoViewModel instance for managing todo list state and logic",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "TodoViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Initializes the TodoViewModel when the view is first created",
          "parameters": [
            "TodoViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "todo_viewmodel.dart",
        "widgets/todo_item.dart",
        "ui/common/ui_helpers.dart"
      ]
    },
    {
      "name": "lib/features/todo/todo_viewmodel.dart",
      "description": "A ViewModel for managing Todo list operations, providing a reactive and structured approach to handling todo items with state management, business logic, and user interactions",
      "class_diagram": "@startuml\nclass TodoViewModel {\n  -_todoRepository: TodoRepository\n  -_navigationService: NavigationService\n  -_dialogService: DialogService\n  +todos: List<Map<String, dynamic>>\n  +loadTodos()\n  +addTodo(title: String, description: String)\n  +toggleTodoComplete(id: String)\n  +deleteTodo(id: String)\n  +navigateToProfile()\n  +init()\n}\n@enduml",
      "methods": [
        {
          "name": "loadTodos",
          "description": "Fetches all todo items from the repository and updates the view state",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "addTodo",
          "description": "Creates a new todo item with the given title and description",
          "parameters": [
            "title",
            "description"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "toggleTodoComplete",
          "description": "Marks a specific todo item as complete or incomplete",
          "parameters": [
            "id"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deleteTodo",
          "description": "Removes a todo item after user confirmation via dialog",
          "parameters": [
            "id"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "navigateToProfile",
          "description": "Navigates to the user profile view",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "init",
          "description": "Initializes the ViewModel by loading existing todo items",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "stacked",
        "stacked_services",
        "todo_apps/app/app.locator.dart",
        "todo_apps/features/todo/todo_repository.dart"
      ]
    },
    {
      "name": "lib/features/todo/widgets/todo_item.dart",
      "description": "A reusable UI component for rendering individual todo list items with interactive capabilities like toggle completion and deletion",
      "class_diagram": "@startuml\nclass TodoItem {\n  +todo: Map<String, dynamic>\n  +onToggle(String id)\n  +onDelete(String id)\n  +build(BuildContext context)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Constructs the visual representation of a todo item with checkbox, title, description, and delete button",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "ui/common/app_colors.dart",
        "ui/common/ui_helpers.dart"
      ]
    },
    {
      "name": "lib/features/todo/widgets/add_todo_dialog.dart",
      "description": "A Flutter dialog widget for creating new todo items with title and optional description, providing a user-friendly interface for adding tasks to a todo list",
      "class_diagram": "@startuml\nclass AddTodoDialog {\n  +DialogRequest request\n  +Function(DialogResponse) completer\n  +createState()\n}\nclass _AddTodoDialogState {\n  -TextEditingController _titleController\n  -TextEditingController _descriptionController\n  +build()\n  +dispose()\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Renders the dialog UI with text input fields for title and description, and action buttons for adding or canceling the todo",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "dispose",
          "description": "Cleans up text editing controllers to prevent memory leaks",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked_services/stacked_services.dart",
        "todo_apps/ui/common/ui_helpers.dart"
      ]
    },
    {
      "name": "lib/models/user.dart",
      "description": "Defines a User model representing user account information, providing data structure, serialization, and immutable state management for user entities in the application",
      "class_diagram": "@startuml\nclass User {\n  + id: String\n  + username: String\n  + email: String\n  + avatarUrl: String?\n  + fromJson(json: Map): User\n  + toJson(): Map\n  + copyWith(): User\n}\n@enduml",
      "methods": [
        {
          "name": "fromJson",
          "description": "Converts JSON data into a User object, enabling deserialization of user data from external sources",
          "parameters": [
            "json"
          ],
          "return_type": "User"
        },
        {
          "name": "toJson",
          "description": "Transforms User object into a JSON map, facilitating data transmission and storage",
          "parameters": null,
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "copyWith",
          "description": "Creates a new User instance with selected fields updated, supporting immutable state changes",
          "parameters": [
            "id",
            "username",
            "email",
            "avatarUrl"
          ],
          "return_type": "User"
        }
      ],
      "dependencies": [
        "package:equatable/equatable.dart"
      ]
    },
    {
      "name": "lib/services/auth_service.dart",
      "description": "Authentication service responsible for managing user authentication state, handling login/registration, and profile management in a mobile application",
      "class_diagram": "@startuml\nclass AuthService {\n  - StorageService _storageService\n  - User _currentUser\n  + login(email: String, password: String)\n  + register(username: String, email: String, password: String)\n  + logout()\n  + updateProfile(username: String, avatarUrl: String?)\n  + User? getCurrentUser()\n}\n@enduml",
      "methods": [
        {
          "name": "login",
          "description": "Authenticate user with email and password, validate credentials, and store user data",
          "parameters": [
            "email",
            "password"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "register",
          "description": "Create new user account with username, email, and password, validate inputs",
          "parameters": [
            "username",
            "email",
            "password"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "logout",
          "description": "Clear current user session and remove stored user data",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "updateProfile",
          "description": "Update user profile information like username and avatar",
          "parameters": [
            "username",
            "avatarUrl"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "todo_apps/models/user.dart",
        "todo_apps/services/storage_service.dart"
      ]
    },
    {
      "name": "lib/services/storage_service.dart",
      "description": "A comprehensive local storage service utilizing SharedPreferences for persistent data management across authentication, user profiles, and todo list features",
      "class_diagram": "@startuml\nclass StorageService {\n  -_prefs: SharedPreferences\n  +saveData(key: String, value: dynamic)\n  +getData<T>(key: String): T?\n  +removeData(key: String)\n  +saveToken(token: String)\n  +getToken(): String?\n  +saveUserData(userData: Map)\n  +getUserData(): Map?\n  +saveTodos(todos: List<Map>)\n  +getTodos(): List<Map>?\n}\n@enduml",
      "methods": [
        {
          "name": "saveData",
          "description": "Generic method to save different data types to local storage",
          "parameters": [
            "key",
            "value"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "getData",
          "description": "Generic method to retrieve data from local storage with type safety",
          "parameters": [
            "key"
          ],
          "return_type": "T?"
        },
        {
          "name": "saveToken",
          "description": "Securely store authentication token",
          "parameters": [
            "token"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "getToken",
          "description": "Retrieve stored authentication token",
          "parameters": null,
          "return_type": "String?"
        },
        {
          "name": "saveUserData",
          "description": "Store user profile information",
          "parameters": [
            "userData"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "saveTodos",
          "description": "Persist todo list data locally",
          "parameters": [
            "todos"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "shared_preferences",
        "dart:convert",
        "stacked/stacked_annotations.dart"
      ]
    },
    {
      "name": "lib/services/todo_service.dart",
      "description": "A service layer responsible for managing Todo items, providing CRUD operations for todos with state management and persistence through storage service",
      "class_diagram": "@startuml\nclass TodoService {\n  - StorageService _storageService\n  + getTodos()\n  + addTodo(title, description)\n  + updateTodo(id, title?, description?, completed?)\n  + deleteTodo(id)\n  + toggleTodoComplete(id)\n}\nclass StorageService\nTodoService --> StorageService : depends on\n@enduml",
      "methods": [
        {
          "name": "getTodos",
          "description": "Retrieves all stored todo items from storage service",
          "parameters": null,
          "return_type": "Future<List<Map<String, dynamic>>>"
        },
        {
          "name": "addTodo",
          "description": "Creates a new todo item with title, description, and default metadata",
          "parameters": [
            "title",
            "description"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "updateTodo",
          "description": "Updates an existing todo item by its unique ID with optional fields",
          "parameters": [
            "id",
            "title?",
            "description?",
            "completed?"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deleteTodo",
          "description": "Removes a specific todo item from storage by its unique ID",
          "parameters": [
            "id"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "toggleTodoComplete",
          "description": "Switches the completion status of a specific todo item",
          "parameters": [
            "id"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked/stacked_annotations.dart",
        "todo_apps/services/storage_service.dart"
      ]
    },
    {
      "name": "lib/features/profile/profile_repository.dart",
      "description": "A repository class that manages user profile operations, providing an abstraction layer for updating user profile information through an authentication service",
      "class_diagram": "@startuml\nclass ProfileRepository {\n  -AuthService _authService\n  +User? currentUser\n  +updateProfile(String username, String? avatarUrl)\n}\n@enduml",
      "methods": [
        {
          "name": "currentUser",
          "description": "Retrieves the currently authenticated user from the auth service",
          "parameters": null,
          "return_type": "User?"
        },
        {
          "name": "updateProfile",
          "description": "Updates the user's profile with a new username and optional avatar URL",
          "parameters": [
            "username",
            "avatarUrl"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "todo_apps/models/user.dart",
        "todo_apps/services/auth_service.dart"
      ]
    },
    {
      "name": "lib/features/auth/login_viewmodel.dart",
      "description": "Manages user login authentication and navigation flow in a Flutter/Stacked architecture application, handling user credentials, authentication state, and routing between views",
      "class_diagram": "@startuml\nclass LoginViewModel {\n  -_authRepository: AuthRepository\n  -_navigationService: NavigationService\n  -_email: String\n  -_password: String\n  +setEmail(email: String)\n  +setPassword(password: String)\n  +login()\n  +navigateToRegister()\n}\n@enduml",
      "methods": [
        {
          "name": "setEmail",
          "description": "Updates the email input state and triggers UI refresh",
          "parameters": [
            "email"
          ],
          "return_type": null
        },
        {
          "name": "setPassword",
          "description": "Updates the password input state and triggers UI refresh",
          "parameters": [
            "password"
          ],
          "return_type": null
        },
        {
          "name": "login",
          "description": "Performs user authentication and navigates to the todo view upon successful login",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "navigateToRegister",
          "description": "Navigates user to the registration view",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "todo_apps/app/app.locator.dart",
        "todo_apps/app/app.router.dart",
        "todo_apps/features/auth/auth_repository.dart"
      ]
    },
    {
      "name": "lib/features/auth/register_viewmodel.dart",
      "description": "A ViewModel for user registration that handles the registration process, user input management, and navigation in a Flutter/Stacked application. It manages the registration form state, validates input, and coordinates user registration with an authentication repository.",
      "class_diagram": "@startuml\nclass RegisterViewModel {\n  - _authRepository: AuthRepository\n  - _navigationService: NavigationService\n  - _username: String\n  - _email: String\n  - _password: String\n  - _confirmPassword: String\n  + setUsername()\n  + setEmail()\n  + setPassword()\n  + setConfirmPassword()\n  + register()\n  + navigateToLogin()\n}\n@enduml",
      "methods": [
        {
          "name": "setUsername",
          "description": "Updates the username input state and triggers UI refresh",
          "parameters": [
            "username"
          ],
          "return_type": null
        },
        {
          "name": "setEmail",
          "description": "Updates the email input state and triggers UI refresh",
          "parameters": [
            "email"
          ],
          "return_type": null
        },
        {
          "name": "setPassword",
          "description": "Updates the password input state and triggers UI refresh",
          "parameters": [
            "password"
          ],
          "return_type": null
        },
        {
          "name": "register",
          "description": "Validates registration inputs, calls authentication repository to register user, and navigates to TodoView on success",
          "parameters": [],
          "return_type": "Future<void>"
        },
        {
          "name": "navigateToLogin",
          "description": "Navigates user to login screen when requested",
          "parameters": [],
          "return_type": null
        }
      ],
      "dependencies": [
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "todo_apps/app/app.locator.dart",
        "todo_apps/app/app.router.dart",
        "todo_apps/features/auth/auth_repository.dart"
      ]
    },
    {
      "name": "lib/features/auth/register_view.dart",
      "description": "User registration view for managing the authentication user interface, providing a form-based interface for creating a new user account with validation and state management",
      "class_diagram": "@startuml\nclass RegisterView {\n  +builder(context, viewModel, child)\n  +viewModelBuilder(context)\n}\nnote right: User registration UI component\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Renders the registration form UI with input fields for username, email, password, and confirmation",
          "parameters": [
            "BuildContext",
            "RegisterViewModel",
            "Widget"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates the associated view model for managing registration state and logic",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "RegisterViewModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "lib/features/auth/register_viewmodel.dart",
        "lib/ui/common/ui_helpers.dart"
      ]
    },
    {
      "name": "lib/features/profile/profile_view.dart",
      "description": "A user profile management screen that allows users to view and update their profile information, including username and avatar, with logout functionality",
      "class_diagram": "@startuml\nclass ProfileView {\n  +builder()\n  +viewModelBuilder()\n  +onViewModelReady()\n}\nclass ProfileViewModel {\n  +init()\n  +setUsername()\n  +updateProfile()\n  +logout()\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Constructs the profile view UI with user avatar, username input, and update profile button",
          "parameters": [
            "BuildContext",
            "ProfileViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates the ProfileViewModel instance for managing profile-related logic",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "ProfileViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Initializes the view model when the view is first loaded",
          "parameters": [
            "ProfileViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "todo_apps/features/profile/profile_viewmodel.dart",
        "todo_apps/ui/common/ui_helpers.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant LoginView\nparticipant LoginViewModel\nparticipant AuthRepository\nparticipant TodoView\nparticipant TodoViewModel\nparticipant TodoRepository\n\nUser -> LoginView: Enter credentials\nLoginView -> LoginViewModel: Validate credentials\nLoginViewModel -> AuthRepository: Authenticate\nAuthRepository --> LoginViewModel: Authentication result\nalt Authentication Successful\n    LoginViewModel -> TodoView: Navigate\n    TodoView -> TodoViewModel: Initialize\n    TodoViewModel -> TodoRepository: Load todos\n    TodoRepository --> TodoViewModel: Return todo list\n    TodoViewModel --> TodoView: Display todos\n    User -> TodoView: Interact with todos\n    User -> TodoView: Add/Edit/Delete todos\n    TodoView -> TodoViewModel: Trigger todo operations\n    TodoViewModel -> TodoRepository: Persist changes\nend\n@enduml",
  "state_management_flow": "State management is implemented using the Stacked framework's reactive approach. ViewModels extend BaseViewModel and use reactive programming principles. Each view has a corresponding ViewModel that manages its state, handles user interactions, and triggers UI updates. State changes are propagated through reactive properties, and the UI automatically rebuilds when these properties change. Dependency injection in app.locator.dart enables seamless service and repository access across ViewModels.",
  "navigation_flow": "Navigation is managed using Stacked Router, defined in app.router.dart. The application follows a structured navigation pattern with predefined routes like login, registration, todo list, and profile. The NavigationService handles screen transitions, allowing programmatic navigation between views. Authentication status determines the primary navigation flow, with unauthenticated users directed to login/registration views, and authenticated users navigated to the todo list view. Each navigation transition is tracked and can trigger corresponding analytics events."
}